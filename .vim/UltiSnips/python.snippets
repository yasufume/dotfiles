context "python_expression"
global !p
def write_docstring(raw_args, raw_return, snip):
	args = re.findall("(\w+(?=:))", raw_args) or \
		[arg.strip() for arg in raw_args.split(",") if arg.strip()]
	
	ok_args =args and args[0] != "self" or len(args) > 1
	if ok_args:
		snip.rv += "\n" + snip.mkline("", indent="")
		snip >> 1
		snip += "Args:"
		snip >> 1
		for arg in args:
			if arg == "self":
				continue
			snip += arg + f": TODO: Docstring for {arg}."
		snip << 2
	
	if raw_return != "None":
		snip.rv += "\n" + snip.mkline("", indent="")
		snip >> 1
		snip += "Returns:"
		snip >> 1
		snip += "TODO: Docstring."
		snip << 2
	if ok_args or raw_return != "None":
		snip.rv += "\n" + snip.mkline("", indent="")
		snip >> 1
		
	snip.rv += snip.mkline('"""')
endglobal

# General
snippet paa "parser.add_argument" b
${1:parser}.add_argument("${2:short_name}", "${3:long_name}", type=${4:type}, default=${5:default}, required=${6:required}, help="${7:help}")
endsnippet

snippet ppa "parser.parse_args" b
${1:name} = ${2:parser}.parse_args()
endsnippet

snippet def "define a function" b
def ${1:function_name}(${2}) -> ${3:None}:
	"""${4:TODO: Docstring for $1.}`!p write_docstring(t[2], t[3], snip)`
	${0:...}
endsnippet

snippet sdef "define a staticmethod" b
@staticmethod
def ${1:function_name}(${2}) -> ${3:None}:
	"""${4:TODO: Docstring for $1.}`!p write_docstring(t[2], t[3], snip)`
	${0:...}
endsnippet

snippet cdef "define a classmethod" b
@classmethod
def ${1:function_name}(cls${2}) -> ${3:None}:
	"""${4:TODO: Docstring for $1.}`!p write_docstring(t[2], t[3], snip)`
	${0:...}
endsnippet

snippet class "define a class" b
class ${1:class_name}:
	"""${2:TODO: Docstring for $1.}"""

	${0:...}
endsnippet

snippet classi "define a class with an initializer" b
class ${1:class_name}:
	"""${2: TODO: Docstring for $1.}`!p write_docstring(t[3], "None", snip)`

	def __init__(self${3}) -> None:
		${0:...}
endsnippet

# Competitive programming
snippet ir "input rstrip" b
${1:S} = input().rstrip()
endsnippet

snippet ii "int input" b
${1:N} = int(input())
endsnippet

snippet is "input split" b
${1:X} = input().split()
>>>>>>> 64ddf7d (Update Python snippets)
endsnippet

snippet miis "map int input split" b
${1:name} = map(int, input().split())
endsnippet

snippet lmiis "list map int input split" b
${1:A} = [*map(int, input().split())]
endsnippet

snippet g "graph" b
${1:G} = [[] for _ in range(${2:N})]
endsnippet

snippet bp "breakpoint" b
breakpoint()
endsnippet
